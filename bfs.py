# -*- coding: utf-8 -*-
"""BFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GngMLf4luj95HVNkSBGulDuj0hne41EU
"""

import random
from collections import deque

class CustomQueue:#CustomQueue - A custom queue data structure to replace the original Fringe class.
    def __init__(self):
        self.queue = deque() #enqueue - A method in the CustomQueue class to add an item to the queue.
        #dequeue - A method in the CustomQueue class to remove and return an item from the queue.

    def enqueue(self, item):
        self.queue.append(item)

    def dequeue(self):
        if self.queue:
            return self.queue.popleft()
        return -1

def is_goal(matrix, row, col, target):#is_goal - A function to check if a particular position in the matrix is the target.
    return matrix[row][col] == target

def is_valid_step(row, col, N): #is_valid_step - A function to check if a given step is within the bounds of the matrix.
    return 0 <= row < N and 0 <= col < N

print("Initializing the quest")
print("Choose the dimension N (5, 6, or 7):")
N = int(input())

data = random.sample(range(1, 1000), N * N)

the_matrix = [] #the_matrix - A variable representing the matrix in the adventure context.
for row in range(N):
    row_data = []
    for col in range(N):
        row_data.append(data[row * N + col])
    the_matrix.append(row_data)

print()
print("-----The Matrix for Adventure-----")
print()
print("S is the starting point")
print()
for row in range(N):
    row_string = ""
    for col in range(N):
        if row == 0 and col == N - 1:
            row_string += " " + str(the_matrix[row][col]) + "(S) "
        else:
            row_string += " " + str(the_matrix[row][col]) + " "
    print(row_string)

print()
print("Enter the target number you seek (1-999):")
the_quest = int(input()) #the_quest - The target number you are seeking in the adventure.

the_quest_queue = CustomQueue() #the_quest_queue - The custom queue used to keep track of the adventure.
print()
print("-----Commencing the Quest-----")
print()
the_journey = [(0, N - 1)] #the_journey - A list representing the current position in the adventure.
the_quest_queue.enqueue(the_journey)
visited_set = set() # visited_set - A set to keep track of visited positions.
found_the_treasure = False #found_the_treasure - A boolean flag indicating whether the target was found.

adventure_moves = [(0, -1), (-1, 0), (1, 0)] # adventure_moves - A list of possible moves (directions) in the adventure.

while the_quest_queue.queue:
    current_state = the_quest_queue.dequeue() #current_state - The current position in the adventure.
    if current_state[-1] in visited_set:
        continue
    visited_set.add(current_state[-1])

    (current_row, current_col) = current_state[-1]
    if is_goal(the_matrix, current_row, current_col, the_quest):
        found_the_treasure = True
        break

    for move in adventure_moves:
        new_row, new_col = current_row + move[0], current_col + move[1]
        if is_valid_step(new_row, new_col, N):
            the_quest_queue.enqueue(current_state + [(new_row, new_col)])

    print("Current Location:")
    for state in current_state:
        print(state)

if found_the_treasure:
    print("Quest successful! You found it at", (current_row, current_col))
    print()
    print("Your Epic Journey:")
    for state in current_state:
        print(state)
else:
    print("Quest Failed")