# -*- coding: utf-8 -*-
"""DFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fTg4BSsSFwoJrgm6sry3ovmGQxc0kCeo
"""

import random

# Create a class for the fringe data structure with a twist
class SpaghettiFringe:#SpaghettiFringe: A class name for the data structure used for searching, where a "spaghetti fringe" is an amusing analogy to represent a stack or queue.
    def __init__(self):
        self.spaghetti = []  # Initialize the fringe as a pile of spaghetti
        #spaghetti: The attribute within the SpaghettiFringe class, representing the stack or queue where "meatballs" are stored.

    # Add a meatball (item) to the spaghetti pile
    def toss_meatball(self, meatball):#toss_meatball: A method within the SpaghettiFringe class used to add an element (meatball) to the spaghetti data structure.
        self.spaghetti.append(meatball)

    # Remove and return a meatball from the spaghetti pile
    def slurp_meatball(self):#slurp_meatball: Another method within the SpaghettiFringe class, used to remove and return an element (meatball) from the spaghetti data structure.
        meatball = -1
        pasta_length = len(self.spaghetti)
        if pasta_length >= 2:
            meatball = self.spaghetti[0]
            self.spaghetti = self.spaghetti[1:]
        elif pasta_length == 1:
            meatball = self.spaghetti[0]
            self.spaghetti = []
        else:
            meatball = -1
        return meatball

# Check if the current meatball in the spaghetti matrix matches the target tomato sauce 'e'
def is_delicious_goal(spaghetti_matrix, i, j, target_sauce):#is_delicious_goal: A function that checks whether the current "meatball" in the "spaghetti matrix" matches the desired "tomato sauce" (target_sauce).
    if spaghetti_matrix[i][j] == target_sauce:
        return True
    else:
        return False

# Check if a twirl to a new meatball is within the boundaries of the spaghetti matrix
#is_valid_twirl: A function that checks if a move to a new "meatball" is within the boundaries of the "spaghetti matrix."
def is_valid_twirl(i, j, N):
    return i >= 0 and i < N and j >= 0

print("Setting up the spaghetti problem")
print("Enter the number of meatballs (5, 6, or 7):")
meatball_count = int(input()) #meatball_count: A variable representing the number of meatballs, which is essentially the size of the spaghetti matrix.

ingredients = random.sample(range(1, 1000), meatball_count * meatball_count) #ingredients: A list representing the random ingredients used to create the "spaghetti matrix."

spaghetti_matrix = []#spaghetti_matrix: A variable representing the matrix of meatballs and tomato sauce.
for spaghettini in range(meatball_count): #spaghettini: A variable used to iterate through the rows of the spaghetti matrix.
    meatball_plate = [] #meatball_plate: A variable representing a row of meatballs in the spaghetti matrix.
    for sauce_splatter in range(meatball_count): #sauce_splatter: A variable used to iterate through the columns of the spaghetti matrix.
        meatball_plate.append(ingredients[spaghettini * meatball_count + sauce_splatter])
    spaghetti_matrix.append(meatball_plate)

print()
print("-----Spaghetti Matrix for Delicious Search-----")
print()
print("S denotes the start meatball")
print()
for spaghettini in range(meatball_count):
    twirl_str = "" #twirl_str: A variable used to build a string representation of the "spaghetti matrix," with a humorous reference to "twirl."
    for sauce_splatter in range(meatball_count):
        if spaghettini == 0 and sauce_splatter == meatball_count - 1:
            twirl_str += " " + str(spaghetti_matrix[spaghettini][sauce_splatter]) + "(S) "
        else:
            twirl_str += " " + str(spaghetti_matrix[spaghettini][sauce_splatter]) + " "
    print(twirl_str)

print()
print("Enter the target tomato sauce (1-999):")
target_sauce = int(input()) #target_sauce: A variable representing the desired "tomato sauce" in the spaghetti search.

spaghetti_fringe = SpaghettiFringe() #spaghetti_fringe: An instance of the SpaghettiFringe class, used to manage the "spaghetti" search fringe.
print()
print("-----Starting Delicious Search-----")
print()
start_meatball = [(0, meatball_count - 1)] #start_meatball: A variable representing the initial "meatball" state (start state) of the search.
spaghetti_fringe.toss_meatball(start_meatball)
eaten_spaghetti_set = set() #eaten_spaghetti_set: A set used to keep track of visited "meatballs" (states) to avoid revisiting them.
craving_satisfied = False #craving_satisfied: A boolean variable to indicate whether the search for the target sauce was successful.

# Define twirl directions (left, up, down)
twirls = [(0, -1), (-1, 0), (1, 0)] #twirls: A list representing the possible directions (left, up, down) in which one can twirl or move within the "spaghetti matrix."

while True:
    current_meatball = spaghetti_fringe.slurp_meatball()
    if current_meatball == -1: #current_meatball: A variable representing the current state (current "meatball") during the search.
        break
    if current_meatball[-1] in eaten_spaghetti_set:
        continue
    eaten_spaghetti_set.add(current_meatball[-1])

    (current_twirl_i, current_twirl_j) = current_meatball[-1] #current_twirl_i and current_twirl_j: Variables representing the row and column indices of the current "meatball" (state).
    if is_delicious_goal(spaghetti_matrix, current_twirl_i, current_twirl_j, target_sauce):
        craving_satisfied = True
        break

    for twirl in twirls:
        i, j = current_twirl_i + twirl[0], current_twirl_j + twirl[1]
        if is_valid_twirl(i, j, meatball_count):
            spaghetti_fringe.toss_meatball(current_meatball + [(i, j)])

    print("Current State:")
    for meatball in current_meatball:
        print(meatball)

if craving_satisfied:
    print("Delicious Search successful. Found at ", (current_twirl_i, current_twirl_j))
    print()
    print("Path to Satisfaction:")
    for meatball in current_meatball:
        print(meatball)
else:
    print("Delicious Search Failed")