# -*- coding: utf-8 -*-
"""UCS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BoPQ09YZzkLdFg7fmcvmpsf5oq2Jaa4l
"""

import random
import heapq

# Function to generate a random NxN matrix with a start state at the last column of the first row
def generate_mystical_matrix(N):#generate_mystical_matrix(N): This function generates a random NxN matrix with a starting point marked by a mystical symbol.
    matrix = [[random.randint(1, 1000) for _ in range(N)] for _ in range(N)]
    matrix[0][N-1] = 'ðŸ”®'  # Start state
    return matrix

# Function to print the matrix as a table
def display_mystical_matrix(matrix):#display_mystical_matrix(matrix): This function prints the mystical matrix as a table.
    for row in matrix:
        print("\t".join(map(str, row)))

# Function to embark on a Magical Journey Search
def magical_journey_search(mystical_matrix, treasure):#magical_journey_search(mystical_matrix, treasure): This function performs a magical journey search
#within the mystical matrix to find a hidden treasure. It uses enchanting moves and a magical queue to explore the mystical realm.
    N = len(mystical_matrix) #mystical_matrix: A variable holding the randomly generated matrix for the mystical realm.
    realm_of_visited = set() #N: This variable stores the size of the mystical realm, a value entered by the user.
    starting_portal = (0, N-1)  # Starting portal
    ultimate_goal = None #treasure: This variable stores the number that the user wants to uncover within the mystical realm.
    #ultimate_goal: A variable to store the final mystical location where the hidden treasure is discovered.

    # Define mystical move directions: left, up, down
    enchanted_moves = [(0, -1, 1), (-1, 0, 2), (1, 0, 2)]  # (row_offset, col_offset, cost)
    #enchanted_moves: A list of tuples representing possible magical moves, including row and column offsets, as well as their enchanting costs.

    # Enchanted queue to store magical locations with their enchanting costs
    magical_queue = [(0, starting_portal, [])]  # (cost, location, magical_path)
    #starting_portal: A tuple representing the initial portal (0, N-1) or starting point.

    while magical_queue: #magical_queue: A priority queue to store mystical locations along with their enchantment costs and the magical path taken to reach them.
        enchantment_cost, current_location, magical_path = heapq.heappop(magical_queue) #enchantment_cost: The cost associated with reaching a mystical location.
        mystical_row, mystical_col = current_location #current_location: A tuple representing the current mystical location within the realm.

        if mystical_matrix[mystical_row][mystical_col] == treasure:
            ultimate_goal = current_location
            break

        if current_location not in realm_of_visited:
            realm_of_visited.add(current_location) #realm_of_visited: A set to keep track of mystical locations already explored during the magical journey.

            # Explore magical moves
            for dr, dc, move_cost in enchanted_moves:
                new_row, new_col = mystical_row + dr, mystical_col + dc #mystical_row and mystical_col: Variables representing the row and column of the current mystical location
                if 0 <= new_row < N and 0 <= new_col < N:
                    new_location = (new_row, new_col)
                    enchantment_cost_new = enchantment_cost + move_cost
                    new_magical_path = magical_path + [new_location] #magical_path: A list representing the path taken during the magical journey, consisting of mystical locations.
                    heapq.heappush(magical_queue, (enchantment_cost_new, new_location, new_magical_path))

    return ultimate_goal, magical_path

# Input N and treasure
N = int(input("Enter the size of the Mysterious NxN realm (5, 6, or 7): "))
mystical_realm = generate_mystical_matrix(N)
display_mystical_matrix(mystical_realm)
treasure = int(input("Enter the mystical number to be uncovered: "))

if N not in [5, 6, 7]:
    print("Invalid realm size. Please enter 5, 6, or 7.")
else:
    ultimate_goal, magical_path = magical_journey_search(mystical_realm, treasure)

    if ultimate_goal:
        print("\nDiscovered the hidden treasure", treasure, "at the mystical location", ultimate_goal)
        print("Path taken in the Magical Journey:")
        for mystical_location in magical_path:
            print("Mystical Row:", mystical_location[0], "Mystical Column:", mystical_location[1])
    else:
        print("The elusive treasure", treasure, "remains concealed within the mystical realm.")