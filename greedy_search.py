# -*- coding: utf-8 -*-
"""Greedy search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QKoEZbtlrhrLfYbnMhW7QGygw8vFV82a
"""

import random

# Function to generate a random and very confounding NxN labyrinth with numbers ranging from 1 to 1000
def create_maze_of_chaos(N):#N is the dimension of the random labyrinth or maze.
    return [[random.randint(1, 1000) for _ in range(N)] for _ in range(N)]

def confuse_our_senses(maze):#maze is a two-dimensional list representing the randomly generated labyrinth.
#confuse_our_senses is a function to print the confusing maze on the screen.
    for row in maze:
        print("\t".join(map(str, row)))

# Function to calculate the cosmic enigma for a given mystical state
def decipher_enigma(mystical_state, elusive_number):#elusive_number is the mysterious number you want to search for within the labyrinth.
#decipher_enigma is a function to calculate the enigmatic value of a given mystical state (location).
    row, col = mystical_state
    return abs(row) + abs(col - (len(maze[0]) - 1)) + abs(maze[row][col] - elusive_number)

# Function to embark on an Adventure of Absurdity
def embark_on_absurd_adventure(maze, elusive_number):#embark_on_absurd_adventure is a function to start your peculiar journey through the maze.
    N = len(maze)
    starting_point = (0, N - 1) #starting_point is the initial location from which your absurd adventure begins.
    destination = None #destination is the location that you seek to reach within the labyrinth.

    journey_map = {}  # To store the map of the strange journey
    #journey_map is a dictionary that keeps track of the strange journey, mapping current locations to their predecessors.
    journey_queue = [(starting_point, decipher_enigma(starting_point, elusive_number))]#journey_queue is a list that contains tuples of (location, enigmatic value) and is used to decide the next move in your journey.
    land_of_forgotten_states = set() #land_of_forgotten_states is a set that keeps track of the locations you've already visited in your adventure.

    while journey_queue:
        journey_queue.sort(key=lambda x: x[1])  # Sort by enigmatic value
        current_location, _ = journey_queue.pop(0)
        land_of_forgotten_states.add(current_location)

        if maze[current_location[0]][current_location[1]] == elusive_number:
            destination = current_location
            break

        # Mysterious moves (bewildering left, perplexing up, and confounding down)
        moves = [(0, -1), (-1, 0), (1, 0)]
        for move in moves:
            new_location = (current_location[0] + move[0], current_location[1] + move[1])

            if (
                0 <= new_location[0] < N
                and 0 <= new_location[1] < N
                and new_location not in land_of_forgotten_states
            ):
                journey_queue.append((new_location, decipher_enigma(new_location, elusive_number)))
                journey_map[new_location] = current_location

    # Construct the peculiar path
    peculiar_path = [destination] #peculiar_path is a list that represents the sequence of locations you take during your adventure.
    while destination != starting_point:
        destination = journey_map[destination]
        peculiar_path.append(destination)
    peculiar_path.reverse()

    return peculiar_path

# Input from a parallel universe
N = int(input("Enter a number of your choice (5, 6, or 7): "))
maze = create_maze_of_chaos(N)
confuse_our_senses(maze)
elusive_number = int(input("Choose a number to seek in the maze: "))

if N not in [5, 6, 7]:
    print("You have chosen a forbidden path. N must be 5, 6, or 7.")
else:
    quest_path = embark_on_absurd_adventure(maze, elusive_number)

    # Output the way to the unknown
    print("The Bizarre Path is")
    for strange_step in quest_path:
        print(f" {strange_step}")